---
# Create a docker container for use by molecule
#
# Expected to be called in a loop with `platform` defined as the loop var
#   (loop off of `platforms` list in molecule.yml)


- name: Docker image needs to be customized
  block:
    - name: Check build path
      ansible.builtin.stat:
        path: "{{ docker_platform_modify_image_buildpath }}"
      register: __docker_platform_buildpath_stat

    - name: Build directory doesn't exist
      block:
        - name: Create build directory
          ansible.builtin.file:
            path: "{{ docker_platform_modify_image_buildpath }}"
            state: directory
            mode: 0755

        - name: Copy templates
          ansible.builtin.template:
            src: templates/{{ __docker_platform_item }}
            dest: "{{ docker_platform_modify_image_buildpath}}/{{ __docker_platform_item | regex_replace('\\.j2$', '') }}"
          loop:
            - bash.service.j2
            - entrypoint.sh.j2
            - Dockerfile.j2
          loop_control:
            loop_var: __docker_platform_item
      when: __docker_platform_buildpath_stat.stat.exists is false

    - name: Build local image name
      ansible.builtin.set_fact:
        __docker_platform_built_image_name: "molecule-local-build/{{ docker_platform_image | split(':') | first | split('/') | last }}-custom"

    - name: Docker image is built
      community.docker.docker_image:
        name: "{{ __docker_platform_built_image_name }}"
        build:
          path: "{{ docker_platform_modify_image_buildpath }}"
          cache_from: "{{ docker_platform_image }}"
        source: build
        force_source: true    # Always build a new image when this is run
        tag: latest
      register: image_build_output

    - name: Show image build details
      ansible.builtin.debug:
        var: image_build_output
        verbosity: 1
  when: docker_platform_modify_image

- name: Build docker volume list
  ansible.builtin.set_fact:
    __docker_platform_volume_list: "{{ docker_platform_volumes + ['/sys/fs/cgroup/molecule-ci.scope:/sys/fs/cgroup:rw']
      if docker_platform_systemd
      else docker_platform_volumes }}"

- name: Runtime docker container is present and running
  community.docker.docker_container:
    name: "{{ docker_platform_name }}"
    image: "{{ __docker_platform_built_image_name | default(docker_platform_image) }}"
    state: started
    command: "{{ docker_platform_command }}"
    log_driver: json-file
    hostname: molecule-ci-{{ docker_platform_name }}
    init: false
    cgroupns_mode: "{{ 'host' if docker_platform_systemd is true else 'private' }}"
    privileged: "{{ docker_platform_privileged }}"
    tmpfs: "{{ docker_platform_tmpfs + ['/run'] if docker_platform_systemd else docker_platform_tmpfs }}"
    volumes: "{{ __docker_platform_volume_list }}"
  register: __docker_platform_create_result

- name: Print some info
  ansible.builtin.debug:
    msg: "{{ __docker_platform_create_result }}"
    verbosity: 1

- name: Fail if container is not running
  block:
    - name: Retrieve container log
      ansible.builtin.command:
        cmd: docker logs {{ __docker_platform_create_result.container.Name }}
      changed_when: false
      register: __docker_platform_logfile_cmd

    - name: Display container log
      ansible.builtin.fail:
        msg: "{{ __docker_platform_logfile_cmd.stdout ~  __docker_platform_logfile_cmd.stderr }}"
  when: >
    __docker_platform_create_result.container.State.ExitCode != 0 or
    not __docker_platform_create_result.container.State.Running

- name: Systemd status is healthy
  block:
    - name: System service manager is Systemd
      ansible.builtin.assert:
        that:
          - "ansible_service_mgr == 'systemd'"
        fail_msg: Systemd is enabled, but container service manager isn't Systemd! Is this a Systemd-enabled container?

    - name: Systemd has completed initialization
      ansible.builtin.command:
        cmd: systemctl is-system-running
      register: __docker_platform_systemctl_status
      until: >
        'running' in __docker_platform_systemctl_status.stdout or
        'degraded' in __docker_platform_systemctl_status.stdout
      retries: 30
      delay: 5
      changed_when: false
      failed_when: __docker_platform_systemctl_status.rc > 1

    - name: System is healthy
      ansible.builtin.assert:
        that:
          - "'running' in __docker_platform_systemctl_status.stdout"
        success_msg: Systemd is healthy
        fail_msg: Systemd is unhealthy
  when: docker_platform_systemd

