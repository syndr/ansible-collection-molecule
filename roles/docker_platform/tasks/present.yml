---
# Create a docker container for use by molecule
#
# Expected to be called in a loop with `platform` defined as the loop var
#   (loop off of `platforms` list in molecule.yml)


- name: Initialize state
  ansible.builtin.set_fact:
    # Number of times this role has been included during this playbook run
    __docker_platform_run_count: "{{ __docker_platform_run_count | default(0) | int + 1 }}"

- name: Load system facts
  ansible.builtin.setup:
    filter:
      - ansible_service_mgr

- name: Create {{ docker_platform_name }} docker container
  ansible.builtin.include_tasks: "{{ role_path }}/tasks/create.yml"

- name: Load existing instance configuration
  block:
    - name: Check build path
      ansible.builtin.stat:
        path: "{{ docker_platform_modify_image_buildpath }}"
      register: __docker_platform_buildpath_stat

    - name: Build directory doesn't exist
      block:
        - name: Create build directory
          ansible.builtin.file:
            path: "{{ docker_platform_modify_image_buildpath }}"
            state: directory
            mode: 0755

        - name: Copy templates
          ansible.builtin.template:
            src: templates/{{ __docker_platform_item }}
            dest: "{{ docker_platform_modify_image_buildpath}}/{{ __docker_platform_item | regex_replace('\\.j2$', '') }}"
          loop:
            - bash.service.j2
            - entrypoint.sh.j2
            - Dockerfile.j2
          loop_control:
            loop_var: __docker_platform_item
      when: __docker_platform_buildpath_stat.stat.exists is false

    - name: Build local image name
      ansible.builtin.set_fact:
        __docker_platform_built_image_name: "molecule-local-build/{{ docker_platform_image | split(':') | first | split('/') | last }}-custom"

- name: Write {{ docker_platform_name }} instance config file
  ansible.builtin.copy:
    # This is very basic - just needs an item there to show as managed with docker config
    content: |
      {% if __docker_platform_current_instance_config is defined %}
      {{ __docker_platform_current_instance_config | to_yaml }}
      {% endif %}
      - instance: {{ docker_platform_name }}
        connection: docker
    dest: "{{ docker_platform_molecule_ephemeral_directory }}/instance_config.yml"
    mode: "0600"

- name: Load existing molecule inventory
  block:
    - name: Load existing molecule inventory file
      ansible.builtin.slurp:
        src: "{{ docker_platform_molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
      register: __docker_platform_current_molecule_inventory_b64
      ignore_errors: true

    - name: Decode instance configuration data
      ansible.builtin.set_fact:
        __docker_platform_current_molecule_inventory: "{{ __docker_platform_current_molecule_inventory_b64.content | default({}) | b64decode | from_yaml }}"
  when: __docker_platform_run_count | int > 1

- name: Add {{ docker_platform_name }} to molecule_inventory
  vars:
    __docker_platform_inventory_partial_hostvars: "{{ {
      'ansible_connection': 'community.docker.docker'
      } | combine(docker_platform_hostvars, recursive=true) }}"
    __docker_platform_inventory_partial_yaml: |
      all:
        children:
          molecule:
            hosts:
              "{{ docker_platform_name }}": {{ __docker_platform_inventory_partial_hostvars }}
  ansible.builtin.set_fact:
    __docker_platform_molecule_inventory: >
      {{ __docker_platform_current_molecule_inventory | from_yaml | default({}) | combine(__docker_platform_inventory_partial_yaml | from_yaml, recursive=true) }}

- name: Write {{ docker_platform_name }} to molecule inventory file
  ansible.builtin.copy:
    content: |
      {{ __docker_platform_molecule_inventory | to_yaml }}
    dest: "{{ docker_platform_molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
    mode: "0600"

- name: Print creation output
  ansible.builtin.debug:
    msg: "{{ __docker_platform_create_result }}"
    verbosity: 1

- name: Fail if  is not running
  block:
    - name: Retrieve {{ docker_platform_name }} container log
      ansible.builtin.command:
        cmd: docker logs {{ __docker_platform_create_result.container.Name }}
      changed_when: false
      register: __docker_platform_logfile_cmd

    - name: Container {{ docker_platform_name }} failed to start
      ansible.builtin.fail:
        msg: "{{ __docker_platform_logfile_cmd.stdout ~  __docker_platform_logfile_cmd.stderr }}"
  when: >
    __docker_platform_create_result.container.State.ExitCode != 0 or
    not __docker_platform_create_result.container.State.Running

