---
# Deploy desired EC2 platform(s)
#
# Expected input:
#  - ec2_platform: The current Molecule platform configurations (list)
#

- name: EC2 Provision | Write run config to file
  ansible.builtin.copy:
    dest: "{{ ec2_platform_run_config_path }}"
    content: "{{ ec2_platform_run_config | to_yaml }}"
    mode: "0600"

- name: EC2 Provision | Generate local key pairs
  loop: "{{ ec2_platforms }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  community.crypto.openssh_keypair:
    path: "{{ __ec2_platform.private_key_path }}"
    type: rsa
    size: 2048
    regenerate: never
  register: __ec2_platform_local_keypairs

- name: EC2 Provision | Look up EC2 AMI(s) by owner and name (if image not set)
  loop: "{{ ec2_platforms | selectattr('image', 'undefined') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  vars:
    ____ec2_platform_image_name_map: >-
      "{% if __ec2_platform.image_name is defined and __ec2_platform.image_name | length > 0 %}
      {{ {'name': __ec2_platform.image_name} }}
      {% else %}{}{% endif %}"
  amazon.aws.ec2_ami_info:
    owners: "{{ __ec2_platform.image_owner }}"
    filters: "{{ __ec2_platform.image_filters | default({}) | combine(__ec2_platform_image_name_map) }}"
  register: __ec2_platform_ami_info

- name: EC2 Provision | Look up subnets to determine VPCs (if needed)
  loop: "{{ ec2_platforms | selectattr('vpc_id', 'undefined') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  amazon.aws.ec2_vpc_subnet_info:
    subnet_ids: "{{ __ec2_platform.vpc_subnet_id }}"
  register: __ec2_platform_subnet_info

- name: EC2 Provision | Validate discovered information
  loop: "{{ ec2_platforms }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  ansible.builtin.assert:
    that:
      - >-
        (
          __ec2_platform.image is truthy
          or
          ((__ec2_platform_ami_info.results
            | selectattr('__ec2_platform.name', 'equalto', __ec2_platform.name)).images
            | length > 0)
        )
      - >-
        (
          __ec2_platform.vpc_id is truthy
          or
          ((__ec2_platform_subnet_info.results
            | selectattr('__ec2_platform.name', 'equalto', __ec2_platform.name)).subnets
            | length > 0)
        )
    quiet: true

- name: Show generated keypairs
  loop: "{{ ec2_platforms }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  ansible.builtin.debug:
    var: (__ec2_platform_local_keypairs.results | selectattr('__ec2_platform.name', 'equalto', __ec2_platform.name) | first)
    verbosity: 1

- name: EC2 Provision | Create ephemeral EC2 keys (if needed)
  loop: "{{ ec2_platforms | selectattr('key_inject_method', 'equalto', 'ec2') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  vars:
    __ec2_platform_ssh_pubkey: "{{ (__ec2_platform_local_keypairs.results | selectattr('__ec2_platform.name', 'equalto', __ec2_platform.name) | first).public_key }}"
  amazon.aws.ec2_key:
    profile: "{{ __ec2_platform.aws_profile | default(omit) }}"
    region: "{{ __ec2_platform.region | default(omit) }}"
    name: "{{ __ec2_platform.key_name }}"
    key_material: "{{ __ec2_platform_ssh_pubkey }}"
  register: __ec2_platform_ec2_keys

- name: EC2 Provision | Create ephemeral security groups (if needed)
  loop: "{{ ec2_platforms | selectattr('security_groups', 'falsy') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  vars:
    vpc_subnet: "{{ __ec2_platform_subnet_info.results[0].subnets[0] }}"
  amazon.aws.ec2_security_group:
    profile: "{{ __ec2_platform.aws_profile | default(omit) }}"
    iam_instance_profile: "{{ __ec2_platform.iam_instance_profile | default(omit) }}"
    region: "{{ __ec2_platform.region | default(omit) }}"
    vpc_id: "{{ __ec2_platform.vpc_id or vpc_subnet.vpc_id }}"
    name: "{{ __ec2_platform.security_group_name }}"
    description: "{{ __ec2_platform.security_group_description }}"
    rules: "{{ __ec2_platform.security_group_rules }}"
    rules_egress: "{{ __ec2_platform.security_group_rules_egress }}"
    tags:
      Name: "{{ __ec2_platform.security_group_name }}"
      molecule-run-id: "{{ ec2_platform_run_config.run_id }}"

- name: EC2 Provision | Create ephemeral EC2 instance
  loop: "{{ ec2_platforms }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  vars:
    __ec2_platform_security_groups: "{{ __ec2_platform.security_groups or [__ec2_platform.security_group_name] }}"
    __ec2_platform_generated_image_id: "{{ (ami_info.results[0].images | sort(attribute='creation_date', reverse=True))[0].image_id }}"
    __ec2_platform_image_id: "{{ __ec2_platform.image or __ec2_platform_generated_image_id }}"
    __ec2_platform_ssh_pubkey: "{{ (__ec2_platform_local_keypairs.results | selectattr('__ec2_platform.name', 'equalto', __ec2_platform.name) | first).public_key }}"
    __ec2_platform_generated_cloud_config:
      users:
        - name: "{{ __ec2_platform.ssh_user }}"
          ssh_authorized_keys:
            - "{{ __ec2_platform_ssh_pubkey }}"
          sudo: "ALL=(ALL) NOPASSWD:ALL"
    __ec2_platform_cloud_config: >-
      {{ (__ec2_platform.key_inject_method == 'cloud-init')
           | ternary((__ec2_platform.cloud_config | combine(__ec2_platform_generated_cloud_config)), __ec2_platform.cloud_config) }}
    __ec2_platform_user_data: |-
      #cloud-config
      {{ __ec2_platform_cloud_config | to_yaml }}

    __ec2_platform_generated_tags:
      instance: "{{ __ec2_platform.name }}"
      "molecule-run-id": "{{ ec2_platform_run_config.run_id }}"
      Name: molecule-{{ __ec2_platform.name }}
    __ec2_platform_tags: "{{ (__ec2_platform.tags or {}) | combine(__ec2_platform_generated_tags) }}"
    __ec2_platform_filter_keys: "{{ __ec2_platform_generated_tags.keys() | map('regex_replace', '^(.+)$', 'tag:\\1') }}"
    __ec2_platform_filters: "{{ dict(__ec2_platform_filter_keys | zip(__ec2_platform_generated_tags.values())) }}"
  amazon.aws.ec2_instance:
    profile: "{{ __ec2_platform.aws_profile | default(omit) }}"
    region: "{{ __ec2_platform.region | default(omit) }}"
    filters: "{{ __ec2_platform_filters }}"
    instance_type: "{{ __ec2_platform.instance_type }}"
    image_id: "{{ __ec2_platform_image_id }}"
    vpc_subnet_id: "{{ __ec2_platform.vpc_subnet_id }}"
    security_groups: "{{ __ec2_platform_security_groups }}"
    network:
      assign_public_ip: "{{ __ec2_platform.assign_public_ip }}"
    volumes: "{{ __ec2_platform.volumes }}"
    key_name: "{{ (__ec2_platform.key_inject_method == 'ec2') | ternary(__ec2_platform.key_name, omit) }}"
    tags: "{{ __ec2_platform_tags }}"
    user_data: "{{ __ec2_platform_user_data }}"
    state: "running"
    wait: true
  register: __ec2_instance_creation_jobs
  async: "{{ __ec2_platform.instance_creation_timeout | int }}"
  poll: 0
  changed_when: false   # Asynchronous task, always marked as changed

- name: EC2 Provision | Print instance creation job status
  ansible.builtin.debug:
    var: __ec2_instance_creation_jobs
    verbosity: 1

- name: EC2 Provision | Instance creation is complete
  loop: "{{ __ec2_instance_creation_jobs.results }}"
  loop_control:
    loop_var: __ec2_instance_creation_job
    label: "{{ __ec2_instance_creation_job.__ec2_platform.name }}"
  ansible.builtin.async_status:
    jid: "{{ __ec2_instance_creation_job.ansible_job_id }}"
  register: __ec2_instance_creation_results
  until: __ec2_instance_creation_results.finished
  retries: "{{ (__ec2_instance_creation_job.__ec2_platform.instance_creation_timeout | int / 10) | int }}"
  delay: 10
  # TODO: Update 'changed_when' to reflect the actual state of the task
  changed_when: false

- name: EC2 Provision | Clean up async cache
  loop: "{{ __ec2_instance_creation_jobs.results }}"
  loop_control:
    loop_var: __ec2_instance_creation_job
    label: "{{ __ec2_instance_creation_job.__ec2_platform.name }}"
  ansible.builtin.async_status:
    jid: "{{ __ec2_instance_creation_job.ansible_job_id }}"
    mode: cleanup

- name: EC2 Provision | Print instance creation result
  ansible.builtin.debug:
    var: __ec2_instance_creation_results
    verbosity: 1

# Referenced in exported platform configuration -- see main.yml
- name: EC2 Provision | Collect instance configs
  loop: "{{ __ec2_instance_creation_results.results }}"
  loop_control:
    loop_var: __ec2_instance_record
    label: "{{ __ec2_instance_record.__ec2_instance_creation_job.__ec2_platform.name }}"
  vars:
    __ec2_platform_instance_definition: "{{ ec2_platforms
      | selectattr('name', 'equalto', __ec2_instance_record.__ec2_instance_creation_job.__ec2_platform.name) | first }}"
    __ec2_platform_instance_data: "{{ __ec2_instance_record.instances
      | selectattr('tags.instance', 'equalto', __ec2_instance_record.__ec2_instance_creation_job.__ec2_platform.name) | first }}"
    __ec2_platform_instance:
      instance: "{{ __ec2_platform_instance_definition.name }}"
      address: "{{ __ec2_platform_instance_definition.assign_public_ip
        | ternary(__ec2_platform_instance_data.public_ip_address, __ec2_platform_instance_data.private_ip_address) }}"
      user: "{{ __ec2_platform_instance_definition.ssh_user }}"
      port: "{{ __ec2_platform_instance_definition.ssh_port }}"
      identity_file: "{{ __ec2_platform_instance_definition.private_key_path }}"
      instance_id: "{{ __ec2_platform_instance_data.instance_id }}"
  ansible.builtin.set_fact:
    ec2_platform_instance_configs: "{{ ec2_platform_instance_configs | default([]) + [__ec2_platform_instance] }}"

- name: EC2 Provision | Launch boot wait tasks
  loop: "{{ ec2_platforms }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  ansible.builtin.wait_for:
    timeout: "{{ __ec2_platform.boot_wait_seconds }}"
  register: __ec2_platform_boot_wait_job
  async: "{{ __ec2_platform.boot_wait_seconds | int + 10 }}" # Add 10 seconds to the timeout to allow for the wait_for task to complete
  poll: 0
  changed_when: false

- name: EC2 Provision | Wait for boot process to finish
  loop: "{{ __ec2_platform_boot_wait_job.results }}"
  loop_control:
    loop_var: __ec2_platform_boot_wait_result
    label: "{{ __ec2_platform_boot_wait_result.__ec2_platform.name }}"
  ansible.builtin.async_status:
    jid: "{{ __ec2_platform_boot_wait_result.ansible_job_id }}"
  register: __ec2_platform_boot_wait_results
  until: __ec2_platform_boot_wait_results.finished
  retries: "{{ (__ec2_platform_boot_wait_result.__ec2_platform.boot_wait_seconds | int / 10) | int }}"
  delay: 10
  changed_when: false

- name: EC2 Provision | Clean up async cache
  loop: "{{ __ec2_platform_boot_wait_job.results }}"
  loop_control:
    loop_var: __ec2_platform_boot_wait_result
    label: "{{ __ec2_platform_boot_wait_result.__ec2_platform.name }}"
  ansible.builtin.async_status:
    jid: "{{ __ec2_platform_boot_wait_result.ansible_job_id }}"
    mode: cleanup

- name: EC2 Provision | SSH connectivity check is successful
  loop: "{{ ec2_platforms }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  vars:
    __ec2_platform_instance_config: "{{ ec2_platform_instance_configs
      | selectattr('instance', 'equalto', __ec2_platform.name) | first }}"
  ansible.builtin.wait_for:
    host: "{{ __ec2_platform_instance_config.address }}"
    port: "{{ __ec2_platform_instance_config.port }}"
    search_regex: SSH
    delay: 10
    timeout: 320
    msg: "SSH connectivity check to {{ __ec2_platform_instance_config.address }} on port {{ __ec2_platform_instance_config.port }} failed"
  register: __ec2_platform_ssh_connectivity_check
  until: "'Connection reset by peer' not in __ec2_platform_ssh_connectivity_check.module_stderr | default('')"
  retries: 6
  delay: 10

