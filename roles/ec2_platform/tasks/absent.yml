---
# Remove ec2 test resources

- name: EC2 Deprovision | Load Molecule instance config
  ansible.builtin.set_fact:
    __ec2_instance_molecule_instance_config: "{{ (lookup('file', molecule_instance_config, errors='ignore') or '{}') | from_yaml }}"

- name: EC2 Deprovision | Look up subnets to determine VPCs (if needed)
  loop: "{{ ec2_platforms | selectattr('vpc_id', 'undefined') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  amazon.aws.ec2_vpc_subnet_info:
    subnet_ids: "{{ __ec2_platform.vpc_subnet_id }}"
    region: "{{ __ec2_platform.region }}"
  register: __ec2_platform_subnet_info

- name: EC2 Deprovision | Validate discovered information
  loop: "{{ ec2_platforms | selectattr('vpc_id', 'undefined') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  vars:
    __ec2_platform_discovered_vpc_id: >-
      {{
        __ec2_platform.vpc_id
        or
        (__ec2_platform_subnet_info.results
        | selectattr('__ec2_platform.name', 'equalto', __ec2_platform.name)).subnets.vpc_id
      }}
  ansible.builtin.assert:
    that:
      - (__ec2_platform.vpc_id or (__ec2_platform_discovered_vpc_id | length > 0))
    quiet: true

# TODO: Store instance id in platform run config on disk, and only look up instances if needed
# TODO: Don't delete all instances if more are returned than in the provided platform config
#       (IE: if the platform config is a subset of the full scenario config)

- name: EC2 Deprovision | Look up EC2 instance by tag
  loop: "{{ ec2_platforms }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  amazon.aws.ec2_instance_info:
    profile: "{{ __ec2_platform.aws_profile | default(omit) }}"
    region: "{{ __ec2_platform.region | default(omit) }}"
    filters:
      "tag:molecule-run-id": "{{ ec2_platform_run_config.run_id }}"
      "tag:instance": "{{ __ec2_platform.name }}"
  register: __ec2_instance_info

- name: EC2 Deprovision | Remove instances
  vars:
    __ec2_platform_existing_instances: "{{ __ec2_instance_info.results | map(attribute='instances') | flatten }}"
  block:
    - name: EC2 Deprovision | üêú Show EC2 instances
      ansible.builtin.debug:
        var: __ec2_platform_existing_instances
        verbosity: 1

    - name: EC2 Deprovision | Validate EC2 instances
      ansible.builtin.assert:
        # WARNING: This will fail if platforms were to support more than one instance
        that:
          - __ec2_platform_existing_instances | length <= ec2_platforms | length
        fail_msg: "More instances found than expected! Found {{ __ec2_platform_existing_instances | length }} instances."
        success_msg: "{{ __ec2_platform_existing_instances | length }} instances found for termination."

    - name: EC2 Deprovision | Destroy ephemeral EC2 instance
      loop: "{{ __ec2_platform_existing_instances }}"
      loop_control:
        loop_var: __ec2_platform_existing_instance
        label: "{{ __ec2_platform_existing_instance.tags.instance }}"
      vars:
        __ec2_platform: "{{ ec2_platforms | selectattr('name', 'equalto', __ec2_platform_existing_instance.tags.instance) | first }}"
      amazon.aws.ec2_instance:
        profile: "{{ __ec2_platform.aws_profile | default(omit) }}"
        region: "{{ __ec2_platform.region | default(omit) }}"
        instance_ids: "{{ __ec2_platform_existing_instance.instance_id }}"
        vpc_subnet_id: "{{ __ec2_platform.vpc_subnet_id }}"
        state: absent
      register: __ec2_instance_destroy_job
      async: 300
      poll: 0

    - name: EC2 Deprovision | üêú Show EC2 instance destroy job status
      ansible.builtin.debug:
        var: __ec2_instance_destroy_job
        verbosity: 1

    - name: EC2 Deprovision | Instance destruction is complete
      loop: "{{ __ec2_instance_destroy_job.results }}"
      loop_control:
        loop_var: __ec2_instance_destroy_result
        label: "{{ __ec2_instance_destroy_result.__ec2_platform_existing_instance.tags.instance }}"
      ansible.builtin.async_status:
        jid: "{{ __ec2_instance_destroy_result.ansible_job_id }}"
      register: __ec2_instance_destroy_results
      until: __ec2_instance_destroy_results.finished
      retries: "{{ (300 / 5) | int }}"
      delay: 5

    - name: EC2 Deprovision | Clean up async cache
      loop: "{{ __ec2_instance_destroy_job.results }}"
      loop_control:
        loop_var: __ec2_instance_destroy_result
        label: "{{ __ec2_instance_destroy_result.__ec2_platform_existing_instance.tags.instance }}"
      ansible.builtin.async_status:
        jid: "{{ __ec2_instance_destroy_result.ansible_job_id }}"
        mode: cleanup

- name: EC2 Deprovision | Destroy ephemeral security groups (if needed)
  loop: "{{ ec2_platforms | selectattr('security_groups', 'falsy') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  amazon.aws.ec2_security_group:
    profile: "{{ __ec2_platform.aws_profile | default(omit) }}"
    region: "{{ __ec2_platform.region | default(omit) }}"
    vpc_id: "{{ __ec2_platform.vpc_id or __ec2_platform_subnet_info.subnets[0] }}"
    name: "{{ __ec2_platform.security_group_name }}"
    state: absent

- name: EC2 Deprovision | Destroy ephemeral keys (if needed)
  loop: "{{ ec2_platforms | selectattr('key_inject_method', 'equalto', 'ec2') }}"
  loop_control:
    loop_var: __ec2_platform
    label: "{{ __ec2_platform.name }}"
  amazon.aws.ec2_key:
    profile: "{{ __ec2_platform.aws_profile | default(omit) }}"
    region: "{{ __ec2_platform.region | default(omit) }}"
    name: "{{ __ec2_platform.key_name }}"
    state: absent

- name: EC2 Deprovision | Remove ec2 instance config file
  # Only run when this execution is operating on the full scenario configuration
  #  - we want to avoid removing the instance config if there may still be deployed instances
  #    (IE: if this role is called on individual items in the platforms list)
  #  - Molecule's builtin ephemeral dir cleanup should remove the instance config in this case
  when: ec2_platform_definition | length == molecule_yml.platforms | default([]) | length
  ansible.builtin.file:
    path: "{{ ec2_platform_run_config_path }}"
    state: absent

