---
# tasks file for init

- name: Check configuration data
  ansible.builtin.include_tasks: "{{ role_path }}/tasks/asserts.yml"

- name: Autodetect repository type
  ansible.builtin.include_tasks: "{{ role_path }}/tasks/auto.yml"
  when: init_project_type == 'auto'

- name: Build base platform definition
  when: init_platforms is not truthy
  # TODO: Define these values in the role defaults
  block:
    - name: Build base docker platform definition
      when: init_platform_type == 'docker'
      ansible.builtin.set_fact:
        init_platforms:
          - name: docker-rockylinux9
            type: docker
            config:
              image: "geerlingguy/docker-rockylinux9-ansible:latest"
              systemd: true

    - name: Build base ec2 platform definition
      when: init_platform_type == 'ec2'
      ansible.builtin.set_fact:
        init_platforms:
          - name: ec2-rockylinux9
            type: ec2
            config:
              image: "ami-067daee80a6d36ac0"
              instance_type: "t3.micro"
              region: "us-east-2"
              vpc_id: "vpc-12345678"
              vpc_subnet_id: "subnet-12345678"

    - name: Platform definition is valid
      ansible.builtin.assert:
        that:
          - init_platforms is defined
          - init_platforms | length > 0
          - init_platforms[0].name is string
          - init_platforms[0].type is string
          - init_platforms[0].config is mapping
        fail_msg: "Platform definition failed! Check the platform configuration."
        success_msg: "Platform definition is valid"

- name: Load collection meta information
  block:
    - name: Load collection meta data
      ansible.builtin.slurp:
        src: "{{ role_path }}/../../MANIFEST.json"
      register: __init_collection_meta
      ignore_errors: true

    - name: üêú Show collection meta data
      ansible.builtin.debug:
        var: __init_collection_meta.content | b64decode | from_json
        verbosity: 1
      ignore_errors: true

    - name: Collection meta data is valid
      ansible.builtin.assert:
        that:
          - __init_collection_meta is not failed
          - __init_collection_meta.content is defined
          - (__init_collection_meta.content | b64decode | from_json).collection_info.version is defined
        fail_msg: "Collection meta data not found! Check the collection configuration."
        success_msg: "Collection meta data found"

    - name: Extract collection meta info
      ansible.builtin.set_fact:
        __init_collection_meta: "{{ (__init_collection_meta.content | b64decode | from_json) }}"

- name: Get collection version
  when: init_collection_version is not truthy
  ansible.builtin.set_fact:
    init_collection_version: "{{ __init_collection_meta.collection_info.version }}"

- name: Deploy molecule configuration
  ansible.builtin.template:
    src: "{{ role_path }}/templates/molecule.yml.j2"
    dest: "{{ init_scenario_dir }}/molecule.yml"
    mode: 0644
    backup: "{{ init_file_backup }}"

- name: Deploy template
  ansible.builtin.template:
    src: "{{ role_path }}/templates/{{ __init_item }}.j2"
    dest: "{{ init_scenario_dir }}/{{ __init_item }}"
    mode: 0644
    backup: "{{ init_file_backup }}"
  loop:
    - collections.yml
    - requirements.yml
    - create.yml
    - prepare.yml
    - destroy.yml
  loop_control:
    loop_var: __init_item

- name: Deploy file
  ansible.builtin.copy:
    src: "{{ role_path }}/files/{{ __init_item }}"
    dest: "{{ init_scenario_dir }}/{{ __init_item }}"
    mode: 0644
    backup: "{{ init_file_backup }}"
  loop:
    - converge.yml
    - side_effect.yml
    - verify.yml
    - cleanup.yml
  loop_control:
    loop_var: __init_item

