---
role_name_check: 0
dependency:
  name: galaxy
driver:
  name: default
  options:
    managed: true
{% if 'docker' in init_platforms | map(attribute='type') %}
{% if init_platforms | map(attribute='type') | list | unique | count > 1 %}
    # WARNING! Multiple platform types are defined! This is not supported!
    #   - 'molecule login' will only work for docker containers
    #   - random, unexpected behavior may occur
    #   - the sky may fall
{% endif %}
    login_cmd_template: 'docker exec -ti {instance} bash --login'
{% endif %}
platforms:
  # See platform documentation at {{ __init_collection_repository }}/tree/main/roles/{{ init_platform_type }}_platform/README.md
{% for init_platform in __init_runtime_platforms %}
  - name: {{ init_platform.name }}
    type: {{ init_platform.type }}
{% for key, value in init_platform.items() %}
{% if key not in ['name', 'type', 'hostvars'] %}
    {{ key }}: {{ value }}
{% endif %}
{% endfor -%}
{%- if init_platform.hostvars is defined and init_platform.hostvars is truthy %}
    hostvars:
      {{ init_platform.hostvars | to_nice_yaml }}
{%- else %}
    hostvars: {}
{% endif %}
{% endfor %}
provisioner:
  name: ansible
  log: True
  playbooks:
    create: ../resources/create.yml
    prepare: ../resources/prepare.yml
    converge: ../resources/converge.yml
    side_effect: ../resources/side_effect.yml
    verify: ../resources/verify.yml
    cleanup: ../resources/cleanup.yml
    destroy: ../resources/destroy.yml
  config_options:
    defaults:
      gathering: explicit
      playbook_vars_root: top
      verbosity: ${ANSIBLE_VERBOSITY:-0}
{% if init_ansible_secret_path is truthy %}
      vault_password_file: {{ init_ansible_secret_path }}
{% endif %}
{% if init_project_type == 'monolith' %}
  env:
    ANSIBLE_ROLES_PATH: /usr/share/ansible/roles:/etc/ansible/roles:~/.ansible/roles:${PWD}/roles
    ANSIBLE_COLLECTIONS_PATH: /usr/share/ansible/collections:~/.ansible/collections:${PWD}/collections
{% elif init_project_type == 'playbook' %}
  env:
    ANSIBLE_ROLES_PATH: /usr/share/ansible/roles:/etc/ansible/roles:~/.ansible/roles:${PWD}/roles:${PWD}/../roles:${PWD}/../../roles
    ANSIBLE_COLLECTIONS_PATH: /usr/share/ansible/collections:~/.ansible/collections:${PWD}/collections:${PWD}/../collections:${PWD}/../../collections
{% elif init_ara_support %}
  env:
{% else %}
  env: {}
{% endif %}
{% if init_ara_support %}
    ARA_API_CLIENT: ${ARA_API_CLIENT:-'http'}
    ARA_API_SERVER: ${ARA_API_SERVER:-'http://localhost:8000'}
    ARA_DEFAULT_LABELS: ${ARA_DEFAULT_LABELS:-'testing,molecule'}
    # To use Ara with molecule:
    #  export the ANSIBLE_CALLBACK_PLUGINS env var with the output of 'python3 -m ara.setup.callback_plugins'
    ANSIBLE_CALLBACK_PLUGINS: ${ANSIBLE_CALLBACK_PLUGINS}
{% endif %}
scenario:
  create_sequence:
    - dependency
    - create
  prepare_sequence:
    - dependency
    - create
    - prepare
  check_sequence:
    - dependency
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
    - dependency
    - create
    - prepare
    - converge
  destroy_sequence:
    - dependency
    - cleanup
    - destroy
  test_sequence:
    - dependency
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    - idempotence
    - side_effect
    - verify
    - cleanup
    - destroy
verifier:
  name: ansible
  enabled: true

