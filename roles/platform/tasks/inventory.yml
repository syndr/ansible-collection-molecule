---
# Add a host to the Molecule inventory

- name: Load existing instance configuration
  block:
    - name: Load existing instance configuration file
      ansible.builtin.slurp:
        src: "{{ platform_molecule_ephemeral_directory }}/instance_config.yml"
      register: __platform_current_instance_config_b64
      ignore_errors: true

    - name: Decode instance configuration data
      ansible.builtin.set_fact:
        __platform_current_instance_config: "{{ __platform_current_instance_config_b64.content | default('') | b64decode | from_yaml }}"

- name: Generate new instance configuration
  when: platform_state == 'present'
  block:
    - name: Generate {{ platform_name }} instance configuration (Docker)
      when: platform_type == 'docker'
      ansible.builtin.set_fact:
        __platform_new_instance_config: "{{ {
          'instance': platform_name,
          'connection': 'docker'
          } }}"
        __platform_ansible_hostvars:
          ansible_connection: "community.docker.docker"

    - name: Generate {{ platform_name }} instance configuration (EC2)
      when: platform_type == 'ec2'
      ansible.builtin.set_fact:
        # NOTE: This depends on the ec2_platform_instance_config being set by the ec2_platform role
        __platform_new_instance_config: "{{ {
          'instance': platform_name,
          'address': ec2_platform_instance_config.address,
          'user': ec2_platform_instance_config.user,
          'port': ec2_platform_instance_config.port,
          'identity_file': ec2_platform_instance_config.identity_file,
          'instance_ids': ec2_platform_instance_config.instance_ids
          } }}"
        __platform_ansible_connection: "ssh"
        __platform_ansible_hostvars:
          ansible_connection: "ssh"
          ansible_host: "{{ ec2_platform_instance_config.address }}"
          ansible_port: "{{ ec2_platform_instance_config.port }}"
          ansible_user: "{{ ec2_platform_instance_config.user }}"
          ansible_ssh_private_key_file: "{{ ec2_platform_instance_config.identity_file }}"

    - name: Instance configuration {{ platform_name }} is valid
      ansible.builtin.assert:
        that:
          - __platform_new_instance_config is defined
          - __platform_new_instance_config.instance is string
        fail_msg: "Instance configuration for {{ platform_name }} failed! Check the platform configuration."
        success_msg: "Instance configuration for {{ platform_name }} is defined"

    - name: ðŸª² Current instance config
      ansible.builtin.debug:
        var: __platform_current_instance_config
        verbosity: 1

    - name: Instance name matching this already exists in configuration
      when:
        - __platform_current_instance_config is truthy
        - platform_name in __platform_current_instance_config | map(attribute='instance') | list 
      block:
        - name: Mark config update as unneeded
          ansible.builtin.set_fact:
            __platform_instance_config_update_needed: false

        - name: Existing configuration does not match desired
          when: __platform_new_instance_config != (__platform_current_instance_config | selectattr('instance', 'equalto', platform_name) | list | first)
          block:
            - name: Remove existing {{ platform_name }} configuration (does not match)
              ansible.builtin.set_fact:
                __platform_current_instance_config: "{{
                  __platform_current_instance_config | rejectattr('instance', 'equalto', platform_name) | list }}"
                __platform_instance_config_update_needed: true

- name: Remove instance configuration
  when: platform_state == 'absent'
  block:
    - name: Remove existing {{ platform_name }} configuration
      when:
        - __platform_current_instance_config is truthy
        - platform_name in __platform_current_instance_config | map(attribute='instance') | list
      ansible.builtin.set_fact:
        __platform_current_instance_config: "{{
          __platform_current_instance_config | rejectattr('instance', 'equalto', platform_name) | list }}"
        __platform_instance_config_update_needed: true

- name: dump new instance config
  ansible.builtin.debug:
    var: __platform_new_instance_config
  ignore_errors: true

- name: dump current instance config
  ansible.builtin.debug:
    var: __platform_current_instance_config
  ignore_errors: true

- name: Write {{ platform_name }} instance config file
  when:
    - __platform_instance_config_update_needed
    - __platform_current_instance_config | default(false, true)is truthy or __platform_new_instance_config | default(false, true) is truthy
  vars:
    __platform_instance_config: >-
      {{ __platform_current_instance_config | default([], true) + [__platform_new_instance_config]
      if __platform_new_instance_config | default(false, true) is truthy
      else __platform_current_instance_config }}
  ansible.builtin.copy:
    content: "{{ __platform_instance_config | to_nice_yaml(indent=2) }}"
    dest: "{{ platform_molecule_ephemeral_directory }}/instance_config.yml"
    mode: "0600"

# If the file would be empty, remove it
- name: Remove molecule instance config file
  when:
    - platform_state == 'absent'
    - __platform_current_instance_config | default(false) is not truthy
    - __platform_new_instance_config | default(false) is not truthy
  ansible.builtin.file:
    path: "{{ platform_molecule_ephemeral_directory }}/instance_config.yml"
    state: absent

- name: Load existing molecule inventory
  when: __platform_run_count | int > 1 or platform_state == 'absent'
  block:
    - name: Load existing molecule inventory file
      ansible.builtin.slurp:
        src: "{{ platform_molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
      register: __platform_current_molecule_inventory_b64
      ignore_errors: true

    - name: Decode instance configuration data
      ansible.builtin.set_fact:
        __platform_current_molecule_inventory: "{{ __platform_current_molecule_inventory_b64.content | default({}) | b64decode | from_yaml }}"

- name: Add {{ platform_name }} to molecule_inventory
  when: platform_state == 'present'
  vars:
    __platform_inventory_partial: "{{ {
      'all': {
        'children': {
          'molecule': {
            'hosts': {
              platform_name: __platform_ansible_hostvars
          }}}}} }}"
  ansible.builtin.set_fact:
    __platform_molecule_inventory: >
      {{ __platform_current_molecule_inventory | from_yaml | default({}) | combine(__platform_inventory_partial, recursive=true) }}

- name: Remove {{ platform_name }} from molecule_inventory
  when:
    - platform_state == 'absent'
    - __platform_current_molecule_inventory is truthy
  ansible.builtin.set_fact:
    __platform_molecule_inventory: "{{
      __platform_current_molecule_inventory | combine({
        'all': {
          'children': {
            'molecule': {
              'hosts': (__platform_current_molecule_inventory.all.children.molecule.hosts | default({}) |
                dict2items | rejectattr('key', 'equalto', platform_name) | items2dict)
              }}}}, recursive=true) }}"

- name: Write {{ platform_name }} to molecule inventory file
  ansible.builtin.copy:
    content: |
      {{ __platform_molecule_inventory | default({}) | to_nice_yaml(indent=2) }}
    dest: "{{ platform_molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
    mode: "0600"

- name: Force inventory refresh
  ansible.builtin.meta: refresh_inventory

- name: Fail if molecule group is missing
  when: __platform_molecule_inventory is defined
  ansible.builtin.assert:
    that: "'molecule' in groups"
    fail_msg: |
      molecule group was not found inside inventory groups: {{ groups }}


